-- üìå Chargement de Rayfield UI
local Rayfield = loadstring(game:HttpGet("https://sirius.menu/rayfield"))()

if not Rayfield then
    warn("‚ùå Rayfield UI n'a pas pu √™tre charg√© !")
    return
end
print("‚úÖ Rayfield UI charg√© avec succ√®s !")

-- üîπ Variables principales
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()
local Camera = workspace.CurrentCamera
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")

-- üîπ Param√®tres
local aimActive = false
local alwaysLock = false
local drawFOV = false
local aimSmoothness = 5
local aimFOV = 100
local espEnabled = false
local fovColor = Color3.fromRGB(255, 255, 255)
local espColor = Color3.fromRGB(255, 0, 0)

-- üéØ Cr√©ation du FOV Drawing
local FOVCircle = Drawing.new("Circle")
FOVCircle.Thickness = 2
FOVCircle.NumSides = 50
FOVCircle.Filled = false
FOVCircle.Transparency = 1

-- üìå ESP : Cr√©ation des √©l√©ments Drawing
local ESPBoxes = {}
local ESPNames = {}

-- üìå Interface utilisateur
local Window = Rayfield:CreateWindow({
    Name = "Rivals Aimbot",
    Theme = "Dark",
    ConfigurationSaving = {Enabled = true, FolderName = "RivalsConfig", FileName = "AimbotSettings"},
    KeySystem = true,
    KeySettings = {Key = {"RivalsAimbot123", "TestKey987"}}
})

-- üìå Onglet AIMBOT
local AimbotTab = Window:CreateTab("Aimbot", "crosshair")

AimbotTab:CreateToggle({
    Name = "Enable Aimbot",
    CurrentValue = false,
    Callback = function(state) aimActive = state end
})

AimbotTab:CreateToggle({
    Name = "Always Lock (Mobile)",
    CurrentValue = false,
    Callback = function(state) alwaysLock = state end
})

AimbotTab:CreateSlider({
    Name = "FOV Size",
    Range = {50, 300},
    Increment = 5,
    CurrentValue = aimFOV,
    Callback = function(value)
        aimFOV = value
        FOVCircle.Radius = value
    end
})

AimbotTab:CreateSlider({
    Name = "Smoothness",
    Range = {1, 20},
    Increment = 1,
    CurrentValue = aimSmoothness,
    Callback = function(value) aimSmoothness = value end
})

AimbotTab:CreateToggle({
    Name = "Draw FOV",
    CurrentValue = false,
    Callback = function(state)
        drawFOV = state
        FOVCircle.Visible = state
    end
})

AimbotTab:CreateColorPicker({
    Name = "FOV Color",
    Color = fovColor,
    Callback = function(color)
        fovColor = color
        FOVCircle.Color = color
    end
})

-- üìå Onglet ESP
local EspTab = Window:CreateTab("ESP", "eye")

EspTab:CreateToggle({
    Name = "Enable ESP",
    CurrentValue = false,
    Callback = function(state) espEnabled = state end
})

EspTab:CreateColorPicker({
    Name = "ESP Color",
    Color = espColor,
    Callback = function(color) espColor = color end
})

-- üìå ESP : Affichage en temps r√©el
RunService.RenderStepped:Connect(function()
    if espEnabled then
        for _, box in pairs(ESPBoxes) do box.Visible = false end
        for _, name in pairs(ESPNames) do name.Visible = false end

        for _, player in ipairs(Players:GetPlayers()) do
            if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                local rootPart = player.Character.HumanoidRootPart
                local screenPos, onScreen = Camera:WorldToViewportPoint(rootPart.Position)

                if onScreen then
                    -- Cr√©ation du ESP
                    if not ESPBoxes[player] then
                        ESPBoxes[player] = Drawing.new("Square")
                        ESPBoxes[player].Thickness = 2
                        ESPBoxes[player].Transparency = 1
                        ESPBoxes[player].Filled = false
                    end
                    ESPBoxes[player].Size = Vector2.new(50, 100)
                    ESPBoxes[player].Position = Vector2.new(screenPos.X - 25, screenPos.Y - 50)
                    ESPBoxes[player].Color = espColor
                    ESPBoxes[player].Visible = true

                    -- Cr√©ation du nom du joueur
                    if not ESPNames[player] then
                        ESPNames[player] = Drawing.new("Text")
                        ESPNames[player].Size = 16
                        ESPNames[player].Outline = true
                    end
                    ESPNames[player].Position = Vector2.new(screenPos.X, screenPos.Y - 60)
                    ESPNames[player].Color = espColor
                    ESPNames[player].Text = player.Name
                    ESPNames[player].Visible = true
                end
            end
        end
    end
end)

-- üéØ Aimbot avec correction Smooth
local function getClosestTarget()
    local closestTarget = nil
    local closestDistance = aimFOV

    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("Head") then
            local head = player.Character.Head
            local screenPos, onScreen = Camera:WorldToViewportPoint(head.Position)

            if onScreen then
                local mousePos = UserInputService:GetMouseLocation()
                local distance = (Vector2.new(screenPos.X, screenPos.Y) - mousePos).Magnitude

                if distance < closestDistance then
                    closestTarget = player
                    closestDistance = distance
                end
            end
        end
    end

    return closestTarget
end

-- üéØ Aimbot Loop avec correction du Smooth 1
RunService.RenderStepped:Connect(function()
    if aimActive or alwaysLock then
        local target = getClosestTarget()
        if target and target.Character and target.Character:FindFirstChild("Head") then
            local headPos = Camera:WorldToViewportPoint(target.Character.Head.Position)
            local screenCenter = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)

            local newMousePos = screenCenter
            if aimSmoothness > 1 then
                newMousePos = Vector2.new(
                    screenCenter.X + (headPos.X - screenCenter.X) / aimSmoothness,
                    screenCenter.Y + (headPos.Y - screenCenter.Y) / aimSmoothness
                )
            else
                newMousePos = Vector2.new(headPos.X, headPos.Y)
            end

            mousemoverel(newMousePos.X - screenCenter.X, newMousePos.Y - screenCenter.Y)
        end
    end
end)
